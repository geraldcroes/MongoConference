<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class PHPTourConferenceHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data)
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = (string) $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['titre'])) {
            $value = $data['titre'];
            $return = (string) $value;
            $this->class->reflFields['titre']->setValue($document, $return);
            $hydratedData['titre'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['date'])) {
            $value = $data['date'];
            if ($value instanceof \MongoDate) { $date = new \DateTime(); $date->setTimestamp($value->sec); $return = $date; } else { $return = new \DateTime($value); }
            $this->class->reflFields['date']->setValue($document, $return);
            $hydratedData['date'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['minutes'])) {
            $value = $data['minutes'];
            $return = (int) $value;
            $this->class->reflFields['minutes']->setValue($document, $return);
            $hydratedData['minutes'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['lieu'])) {
            $value = $data['lieu'];
            $return = (string) $value;
            $this->class->reflFields['lieu']->setValue($document, $return);
            $hydratedData['lieu'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['conferenciers']) ? $data['conferenciers'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork, '$');
        $return->setOwner($document, $this->class->fieldMappings['conferenciers']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['conferenciers']->setValue($document, $return);
        $hydratedData['conferenciers'] = $return;

        /** @Field(type="collection") */
        if (isset($data['tags'])) {
            $value = $data['tags'];
            $return = $value;
            $this->class->reflFields['tags']->setValue($document, $return);
            $hydratedData['tags'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['plan']) ? $data['plan'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork, '$');
        $return->setOwner($document, $this->class->fieldMappings['plan']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['plan']->setValue($document, $return);
        $hydratedData['plan'] = $return;

        /** @ReferenceOne */
        if (isset($data['slides'])) {
            $reference = $data['slides'];
            $className = $this->dm->getClassNameFromDiscriminatorValue($this->class->fieldMappings['slides'], $reference);
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($reference['$id']);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['slides']->setValue($document, $return);
            $hydratedData['slides'] = $return;
        }
        return $hydratedData;
    }
}